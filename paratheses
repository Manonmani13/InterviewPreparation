 Stack<Character> stack = new Stack<>();

        // Iterate through each character in the string
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            // If it's an opening bracket, push to the stack
            if (ch == '{' || ch == '(' || ch == '[') {
                stack.push(ch);
            }
            // If it's a closing bracket
            else if (ch == '}' || ch == ')' || ch == ']') {
                // If stack is empty or top of stack doesn't match, return false
                if (stack.isEmpty()) {
                    return false;
                }

                char top = stack.pop();

                // Check for matching pairs
                if ((ch == '}' && top != '{') || 
                    (ch == ')' && top != '(') || 
                    (ch == ']' && top != '[')) {
                    return false;
                }
            }
        }

        // If stack is empty, all brackets matched; otherwise, it's unbalanced
        return stack.isEmpty();
